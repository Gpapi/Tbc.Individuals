// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tbc.Individuals.Persistance.Sql;

#nullable disable

namespace Tbc.Individuals.Persistance.Sql.Migrations
{
    [DbContext(typeof(IndividualsContext))]
    partial class IndividualsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tbc.Individuals.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.ToTable("Cities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameId = 1
                        },
                        new
                        {
                            Id = 2,
                            NameId = 2
                        },
                        new
                        {
                            Id = 3,
                            NameId = 3
                        },
                        new
                        {
                            Id = 4,
                            NameId = 4
                        },
                        new
                        {
                            Id = 5,
                            NameId = 5
                        },
                        new
                        {
                            Id = 6,
                            NameId = 6
                        },
                        new
                        {
                            Id = 7,
                            NameId = 7
                        },
                        new
                        {
                            Id = 8,
                            NameId = 8
                        },
                        new
                        {
                            Id = 9,
                            NameId = 9
                        },
                        new
                        {
                            Id = 10,
                            NameId = 10
                        },
                        new
                        {
                            Id = 11,
                            NameId = 11
                        },
                        new
                        {
                            Id = 12,
                            NameId = 12
                        },
                        new
                        {
                            Id = 13,
                            NameId = 13
                        },
                        new
                        {
                            Id = 14,
                            NameId = 14
                        },
                        new
                        {
                            Id = 15,
                            NameId = 15
                        },
                        new
                        {
                            Id = 16,
                            NameId = 16
                        },
                        new
                        {
                            Id = 17,
                            NameId = 17
                        },
                        new
                        {
                            Id = 18,
                            NameId = 18
                        },
                        new
                        {
                            Id = 19,
                            NameId = 19
                        },
                        new
                        {
                            Id = 20,
                            NameId = 20
                        });
                });

            modelBuilder.Entity("Tbc.Individuals.Domain.Entities.Individual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonalId")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Individuals", (string)null);
                });

            modelBuilder.Entity("Tbc.Individuals.Domain.Entities.RelatedIndividual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IndividualId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedIndividualId")
                        .HasColumnType("int");

                    b.Property<int>("RelationshipType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("RelatedIndividualId");

                    b.ToTable("RelatedIndividuals", (string)null);
                });

            modelBuilder.Entity("Tbc.Individuals.Domain.Entities.Translation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Translations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1
                        },
                        new
                        {
                            Id = 2
                        },
                        new
                        {
                            Id = 3
                        },
                        new
                        {
                            Id = 4
                        },
                        new
                        {
                            Id = 5
                        },
                        new
                        {
                            Id = 6
                        },
                        new
                        {
                            Id = 7
                        },
                        new
                        {
                            Id = 8
                        },
                        new
                        {
                            Id = 9
                        },
                        new
                        {
                            Id = 10
                        },
                        new
                        {
                            Id = 11
                        },
                        new
                        {
                            Id = 12
                        },
                        new
                        {
                            Id = 13
                        },
                        new
                        {
                            Id = 14
                        },
                        new
                        {
                            Id = 15
                        },
                        new
                        {
                            Id = 16
                        },
                        new
                        {
                            Id = 17
                        },
                        new
                        {
                            Id = 18
                        },
                        new
                        {
                            Id = 19
                        },
                        new
                        {
                            Id = 20
                        });
                });

            modelBuilder.Entity("Tbc.Individuals.Domain.Entities.TranslationValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<int?>("TranslationId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("TranslationId");

                    b.ToTable("TranslationValues", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Language = "ka",
                            TranslationId = 1,
                            Value = "თბილისი"
                        },
                        new
                        {
                            Id = 2,
                            Language = "en",
                            TranslationId = 1,
                            Value = "Tbilisi"
                        },
                        new
                        {
                            Id = 3,
                            Language = "ka",
                            TranslationId = 2,
                            Value = "ბათუმი"
                        },
                        new
                        {
                            Id = 4,
                            Language = "en",
                            TranslationId = 2,
                            Value = "Batumi"
                        },
                        new
                        {
                            Id = 5,
                            Language = "ka",
                            TranslationId = 3,
                            Value = "ქუთაისი"
                        },
                        new
                        {
                            Id = 6,
                            Language = "en",
                            TranslationId = 3,
                            Value = "Kutaisi"
                        },
                        new
                        {
                            Id = 7,
                            Language = "ka",
                            TranslationId = 4,
                            Value = "რუსთავი"
                        },
                        new
                        {
                            Id = 8,
                            Language = "en",
                            TranslationId = 4,
                            Value = "Rustavi"
                        },
                        new
                        {
                            Id = 9,
                            Language = "ka",
                            TranslationId = 5,
                            Value = "გორი"
                        },
                        new
                        {
                            Id = 10,
                            Language = "en",
                            TranslationId = 5,
                            Value = "Gori"
                        },
                        new
                        {
                            Id = 11,
                            Language = "ka",
                            TranslationId = 6,
                            Value = "ზუგდიდი"
                        },
                        new
                        {
                            Id = 12,
                            Language = "en",
                            TranslationId = 6,
                            Value = "Zugdidi"
                        },
                        new
                        {
                            Id = 13,
                            Language = "ka",
                            TranslationId = 7,
                            Value = "ფოთი"
                        },
                        new
                        {
                            Id = 14,
                            Language = "en",
                            TranslationId = 7,
                            Value = "Poti"
                        },
                        new
                        {
                            Id = 15,
                            Language = "ka",
                            TranslationId = 8,
                            Value = "თელავი"
                        },
                        new
                        {
                            Id = 16,
                            Language = "en",
                            TranslationId = 8,
                            Value = "Telavi"
                        },
                        new
                        {
                            Id = 17,
                            Language = "ka",
                            TranslationId = 9,
                            Value = "ახალციხე"
                        },
                        new
                        {
                            Id = 18,
                            Language = "en",
                            TranslationId = 9,
                            Value = "Akhaltsikhe"
                        },
                        new
                        {
                            Id = 19,
                            Language = "ka",
                            TranslationId = 10,
                            Value = "ოზურგეთი"
                        },
                        new
                        {
                            Id = 20,
                            Language = "en",
                            TranslationId = 10,
                            Value = "Ozurgeti"
                        },
                        new
                        {
                            Id = 21,
                            Language = "ka",
                            TranslationId = 11,
                            Value = "ამბროლაური"
                        },
                        new
                        {
                            Id = 22,
                            Language = "en",
                            TranslationId = 11,
                            Value = "Ambrolauri"
                        },
                        new
                        {
                            Id = 23,
                            Language = "ka",
                            TranslationId = 12,
                            Value = "ახალქალაქი"
                        },
                        new
                        {
                            Id = 24,
                            Language = "en",
                            TranslationId = 12,
                            Value = "Akhalkalaki"
                        },
                        new
                        {
                            Id = 25,
                            Language = "ka",
                            TranslationId = 13,
                            Value = "ბორჯომი"
                        },
                        new
                        {
                            Id = 26,
                            Language = "en",
                            TranslationId = 13,
                            Value = "Borjomi"
                        },
                        new
                        {
                            Id = 27,
                            Language = "ka",
                            TranslationId = 14,
                            Value = "ლანჩხუთი"
                        },
                        new
                        {
                            Id = 28,
                            Language = "en",
                            TranslationId = 14,
                            Value = "Lanchkhuti"
                        },
                        new
                        {
                            Id = 29,
                            Language = "ka",
                            TranslationId = 15,
                            Value = "მარნეული"
                        },
                        new
                        {
                            Id = 30,
                            Language = "en",
                            TranslationId = 15,
                            Value = "Marneuli"
                        },
                        new
                        {
                            Id = 31,
                            Language = "ka",
                            TranslationId = 16,
                            Value = "საჩხერე"
                        },
                        new
                        {
                            Id = 32,
                            Language = "en",
                            TranslationId = 16,
                            Value = "Sachkhere"
                        },
                        new
                        {
                            Id = 33,
                            Language = "ka",
                            TranslationId = 17,
                            Value = "საგარეჯო"
                        },
                        new
                        {
                            Id = 34,
                            Language = "en",
                            TranslationId = 17,
                            Value = "Sagarejo"
                        },
                        new
                        {
                            Id = 35,
                            Language = "ka",
                            TranslationId = 18,
                            Value = "ჩხოროწყუ"
                        },
                        new
                        {
                            Id = 36,
                            Language = "en",
                            TranslationId = 18,
                            Value = "Chkhorotsku"
                        },
                        new
                        {
                            Id = 37,
                            Language = "ka",
                            TranslationId = 19,
                            Value = "ხაშური"
                        },
                        new
                        {
                            Id = 38,
                            Language = "en",
                            TranslationId = 19,
                            Value = "Khashuri"
                        },
                        new
                        {
                            Id = 39,
                            Language = "ka",
                            TranslationId = 20,
                            Value = "წალკა"
                        },
                        new
                        {
                            Id = 40,
                            Language = "en",
                            TranslationId = 20,
                            Value = "Tsalka"
                        });
                });

            modelBuilder.Entity("Tbc.Individuals.Domain.Entities.City", b =>
                {
                    b.HasOne("Tbc.Individuals.Domain.Entities.Translation", "Name")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Name");
                });

            modelBuilder.Entity("Tbc.Individuals.Domain.Entities.Individual", b =>
                {
                    b.HasOne("Tbc.Individuals.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsMany("Tbc.Individuals.Domain.Entities.Individual.Numbers#Tbc.Individuals.Domain.Entities.PhoneNumber", "Numbers", b1 =>
                        {
                            b1.Property<int>("IndividualId")
                                .HasColumnType("int");

                            b1.Property<string>("Number")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("IndividualId", "Number", "Type");

                            b1.ToTable("PhoneNumbers", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("IndividualId");
                        });

                    b.Navigation("City");

                    b.Navigation("Numbers");
                });

            modelBuilder.Entity("Tbc.Individuals.Domain.Entities.RelatedIndividual", b =>
                {
                    b.HasOne("Tbc.Individuals.Domain.Entities.Individual", null)
                        .WithMany("RelatedIndividuals")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tbc.Individuals.Domain.Entities.Individual", "Individual")
                        .WithMany()
                        .HasForeignKey("RelatedIndividualId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Individual");
                });

            modelBuilder.Entity("Tbc.Individuals.Domain.Entities.TranslationValue", b =>
                {
                    b.HasOne("Tbc.Individuals.Domain.Entities.Translation", null)
                        .WithMany("TranslationValues")
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tbc.Individuals.Domain.Entities.Individual", b =>
                {
                    b.Navigation("RelatedIndividuals");
                });

            modelBuilder.Entity("Tbc.Individuals.Domain.Entities.Translation", b =>
                {
                    b.Navigation("TranslationValues");
                });
#pragma warning restore 612, 618
        }
    }
}
